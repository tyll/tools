#!/usr/bin/python -tt
# vim: fileencoding=utf8
#{{{ License header: MIT
# Copyright (c) 2016 Till Maas <opensource@till.name>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#}}}

import sys

color_values = {"normal": "\x1b[0m",
                "bold": "\x1b[1m",
                "underline": "\x1b[4m",
                "blink": "\x1b[5m",
                "reverse": "\x1b[7m",
                "concealed": "\x1b[8m",
                "red": "\x1b[31m",
                "green": "\x1b[32m",
                "yellow": "\x1b[33m",
                "blue": "\x1b[34m",
                "magenta": "\x1b[35m",
                "cyan": "\x1b[36m",
                "white": "\x1b[37m",
                "blackbg": "\x1b[40m",
                "redbg": "\x1b[41m",
                "greenbg": "\x1b[42m",
                "yellowbg": "\x1b[43m",
                "bluebg": "\x1b[44m",
                "magentabg": "\x1b[45m",
                "cyanbg": "\x1b[46m",
                "whitebg": "\x1b[47m",
                }


def get_values(c):
    values = {"hex": format_hex(c)}
    values.update(color_values)
    return values


def color(s):
    return (s + "{normal}").format(**color_values)


def format_known(c, diff):
    values = get_values(c)
    if diff:
        values["diff"] = values["bold"]
    else:
        values["diff"] = ""
    return "{green}{diff}{hex}{normal}".format(**values)


def format_partly_known(c, diff):
    values = get_values(c)
    if diff:
        values["diff"] = values["bold"]
    else:
        values["diff"] = ""
    return "{whitebg}{cyan}{diff}{hex}{normal}".format(**values)


def format_hex(c):
    if c == -1:
        return "  "
    else:
        return "{0:02x} ".format(c)


def format_diff(c):
    values = get_values(c)
    return "{red}{bold}{hex}{normal}".format(**values)


def diff_files(file1, file2, known_file=None):
    known = []
    partly_known = []

    if known_file:
        with open(known_file, "rb") as ifile:
            known_data = ifile.readlines()

        for byte, line in enumerate(known_data):
            if len(line) > 11:
                data = line[10:]
                if data[0] == "?":
                    partly_known.append(byte)
                else:
                    known.append(byte)

    with open(file1, "rb") as ifile:
        data1 = ifile.read()

    with open(file2, "rb") as ifile:
        data2 = ifile.read()

    diff1 = ""
    diff2 = ""

    for i in xrange(0, max(len(data1), len(data2))):
        if i % 16 == 0:
            o = "{0:04x}: ".format(i)
            diff1 += o
            diff2 += o

        try:
            c1 = ord(data1[i])
        except IndexError:
            c1 = -1

        try:
            c2 = ord(data2[i])
        except IndexError:
            c2 = -1

        if c1 == c2:
            diff = False
        else:
            diff = True

        if i > min(len(data1), len(data2)):
            diff1 += format_hex(c1)
            diff2 += format_hex(c2)
        elif i in known:
            diff1 += format_known(c1, diff=diff)
            diff2 += format_known(c2, diff=diff)
        elif i in partly_known:
            diff1 += format_partly_known(c1, diff=diff)
            diff2 += format_partly_known(c2, diff=diff)
        elif diff:
            diff1 += format_diff(c1)
            diff2 += format_diff(c2)
        else:
            diff1 += format_hex(c1)
            diff2 += format_hex(c2)

        if i % 16 == 7:
            diff1 += " "
            diff2 += " "

        if i % 16 == 15:
            diff1 += "\n"
            diff2 += "\n"

    if i % 16 != 15:
        diff1 += "\n"
        diff2 += "\n"

    return diff1, diff2


if __name__ == "__main__":
    known_files = {}
    try:
        with open("hexdiff-known.conf", "rb") as ifile:
            for line in ifile.readlines():
                line = line.strip()
                suffix, filename = line.split(" ")
                known_files[suffix] = filename

    except IOError:
        pass
    file1 = sys.argv[1]

    first = True
    for file2 in sys.argv[2:]:
        known_file = None
        for suffix, filename in known_files.items():
            if file1.endswith(suffix):
                known_file = filename

        diff1, diff2 = diff_files(file1, file2, filename)
        if first:
            print file1
            sys.stdout.write(diff1)
            print ""
            first = False
        print file2
        sys.stdout.write(diff2)
