#!/usr/bin/python3 -tt
# Copyright (c) 2020 Till Maas <opensource@till.name>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# vim: fileencoding=utf8

import argparse
import fnmatch
import os
import subprocess
import sys

IMAGEPATH = os.path.expanduser("~/cloud-images")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", default=False, action="store_true")
    parser.add_argument(
        "--inventory-script",
        default="/usr/share/ansible/inventory/standard-inventory-qcow2",
        help="Inventory script to use, default: %(default)s",
    )
    parser.add_argument(
        "--extra-vars", default=None, help="Extra vars for ansible-playbook"
    )
    parser.add_argument("vm")
    parser.add_argument("tests", nargs="+")
    args = parser.parse_args()

    env = os.environ
    if args.debug:
        env["TEST_DEBUG"] = "1"

    images = sorted([i for i in os.listdir(IMAGEPATH) if "qcow" in i])

    if os.path.isfile(args.vm):
        runvms = [args.vm]
    else:
        args.vm = "*" + args.vm + "*".lower()
        runvms = []

        for vm in images:
            if fnmatch.fnmatch(vm.lower(), args.vm.lower()):
                if vm.endswith("qcow2c") or vm.endswith("qcow2"):
                    runvms.append(vm)

    if not runvms:
        print("ERROR: No VM matches " + args.vm)
        print("Available images: \n" + "\n".join(images) + "\n")
        sys.exit(1)

    env["TEST_ARTIFACTS"] = "test-artifacts"

    for runvm in runvms:
        vmpath = os.path.join(IMAGEPATH, runvm)
        env["TEST_SUBJECTS"] = vmpath

        vm_setup = vmpath + "_setup.yml"
        if os.path.exists(vm_setup):
            setup_playbook = vm_setup
        else:
            setup_playbook = os.path.join(IMAGEPATH, "_setup.yml")

        # print("\n".join("{}={}".format(k, v) for k, v in env.items()))

        all_setup = os.path.join(IMAGEPATH, "all_setup.yml")
        cmd = ["ansible-playbook", "-v", "-i", args.inventory_script]

        if args.extra_vars:
            cmd += ["--extra-vars", args.extra_vars]

        cmd += [all_setup, setup_playbook]
        for test in args.tests:
            title = "Running: {} on {}".format(test, runvm)
            print(title)
            print("=" * len(title))
            print(" ".join(cmd))
            subprocess.check_call(cmd + [test], env=env)
