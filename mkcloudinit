#! /usr/bin/python3 -tt
# Copyright (c) 2020 Till Maas <opensource@till.name>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
""" create iso image for NoCloud cloud-init datasource:
https://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
"""

import argparse
import os
import random
import subprocess
import tempfile


USER_DATA = """#cloud-config
users:
  - default
  - name: {username}
    ssh_authorized_keys:
      - {pubkey}
ssh_pwauth: True
chpasswd:
  list: |
    {username}:{password}
  expire: False
"""

META_DATA = """
local-hostname: {hostname}
"""

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--pubkey", default="~/.ssh/cloud_init.pub")
    parser.add_argument("--username", default="root")
    parser.add_argument("--password", default="foobar")
    parser.add_argument("--hostname", default=None)
    parser.add_argument("iso", default="cloud-init.iso")
    args = parser.parse_args()
    args.pubkey = open(os.path.expanduser(args.pubkey)).read()

    if not args.hostname:
        args.hostname = "cloud-{:02d}".format(random.randint(0, 99))

    argsdict = {k:getattr(args, k) for k in dir(args) if not k.startswith("_")}

    userdata = USER_DATA.format(**argsdict)
    metadata = META_DATA.format(**argsdict)

    stagingdir = tempfile.mkdtemp(prefix="mkinitcloud-")
    userdatapath = os.path.join(stagingdir, "user-data")

    with open(userdatapath, "w") as ofile:
        ofile.write(userdata)

    metadatapath = os.path.join(stagingdir, "meta-data")

    with open(metadatapath, "w") as ofile:
        ofile.write(metadata)

    subprocess.check_call(
        ["genisoimage", "-input-charset", "utf-8", "-volid", "cidata",
         "-joliet", "-rock", "-output", args.iso, metadatapath, userdatapath])
